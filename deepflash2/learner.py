# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/00_learner.ipynb (unless otherwise specified).

__all__ = []

# Cell
from fastai2.vision.all import *
from fastcore.foundation import patch
from .data import TileDataset
from scipy.stats import entropy

# Cell
@patch
def predict_from_tiles(self:Learner, dl=None, tile_ds:TileDataset=None):
        "Predict and reconstruct images from tile dataset."

        if dl is None:
            dl = self.dls.valid
        if tile_ds is None:
            tile_ds = self.dls.valid_ds

        softmax_score, _ = self.get_preds(dl=dl)
        softmax_score = softmax_score.cpu().numpy()
        softmax_score = np.moveaxis(softmax_score, 1,-1)

        smxcores = tile_ds.reconstruct_from_tiles(softmax_score)
        segmentations = [np.argmax(x, axis=-1) for x in smxcores]

        return smxcores, segmentations

# Cell
@patch
def apply_dropout(self:Learner):
    "If a module contains 'dropout', it will be switched to .train() mode."
    for m in self.model.modules():
        if isinstance(m, nn.Dropout):  m.train()

# Cell
@patch
def predict_tiles_with_mc_dropout(self:Learner, dl=None, tile_ds=None, n_times=20):
    "Make predictions with dropout applied."

    if dl is None:
        dl = self.dls.valid
    if tile_ds is None:
        tile_ds = self.dls.valid_ds

    self.model.eval()
    self.apply_dropout()

    mean_list = []
    std_list = []
    for data in progress_bar(dl):
        images, _, _ = data
        out_list = []
        for t in range(n_times):
            with torch.no_grad():
                out = self.model(images)
            out = F.softmax(out, dim=1)
            out_list.append(out)
        out_stack = torch.stack(out_list)

        out_means = torch.mean(out_stack, dim=0)
        mean_list.append(out_means)

        out_sdts = torch.std(out_stack, dim=0)
        std_list.append(out_sdts)

    softmax_score = torch.cat(mean_list).cpu().numpy()
    softmax_score = np.moveaxis(softmax_score, 1,-1)

    std_scores = torch.cat(std_list).cpu().numpy()
    std_scores = np.moveaxis(std_scores, 1,-1)
    smxcores = tile_ds.reconstruct_from_tiles(softmax_score)
    segmentations = [np.argmax(x, axis=-1) for x in smxcores]
    std_deviations = tile_ds.reconstruct_from_tiles(std_scores)

    return smxcores, segmentations, std_deviations